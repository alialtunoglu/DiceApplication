D G "__PCH__" 0 33 ""5.015""
D G "__DEVICE__" 0 33 "452"
D G "__DATE__" 0 33 ""25-Nis-23""
D G "__TIME__" 0 33 ""09:03:57"" ";   Program Adý    : ZarApplication/main.c                                  *"
c L "set_tris_a" 2 1 6 "FUNCTION"
v L "value" 2 40 "int8" `54 
f B "set_tris_a" 2 40 "void(int8 value)" `53 
v L "value" 2 41 "int8" `56 
f B "set_tris_b" 2 41 "void(int8 value)" `55 
v L "value" 2 42 "int8" `58 
f B "set_tris_c" 2 42 "void(int8 value)" `57 
v L "value" 2 43 "int8" `60 
f B "set_tris_d" 2 43 "void(int8 value)" `59 
v L "value" 2 44 "int8" `62 
f B "set_tris_e" 2 44 "void(int8 value)" `61 
f B "get_tris_a" 2 45 "int8()" `63 
f B "get_tris_b" 2 46 "int8()" `64 
f B "get_tris_c" 2 47 "int8()" `65 
f B "get_tris_d" 2 48 "int8()" `66 
f B "get_tris_e" 2 49 "int8()" `67 
v L "value" 2 50 "int8" `69 
f B "output_a" 2 50 "void(int8 value)" `68 
v L "value" 2 51 "int8" `71 
f B "output_b" 2 51 "void(int8 value)" `70 
v L "value" 2 52 "int8" `73 
f B "output_c" 2 52 "void(int8 value)" `72 
v L "value" 2 53 "int8" `75 
f B "output_d" 2 53 "void(int8 value)" `74 
v L "value" 2 54 "int8" `77 
f B "output_e" 2 54 "void(int8 value)" `76 
f B "input_a" 2 55 "int8()" `78 
f B "input_b" 2 56 "int8()" `79 
f B "input_c" 2 57 "int8()" `80 
f B "input_d" 2 58 "int8()" `81 
f B "input_e" 2 59 "int8()" `82 
f B "input_change_a" 2 60 "int8()" `83 
f B "input_change_b" 2 61 "int8()" `84 
f B "input_change_c" 2 62 "int8()" `85 
f B "input_change_d" 2 63 "int8()" `86 
f B "input_change_e" 2 64 "int8()" `87 
v L "pin" 2 65 "int16" `89 
f B "input" 2 65 "int8(int16 pin)" `88 
v L "pin" 2 66 "int16" `91 
f B "input_state" 2 66 "int8(int16 pin)" `90 
v L "pin" 2 67 "int16" `93 
f B "output_low" 2 67 "void(int16 pin)" `92 
v L "pin" 2 68 "int16" `95 
f B "output_high" 2 68 "void(int16 pin)" `94 
v L "pin" 2 69 "int16" `97 
f B "output_toggle" 2 69 "void(int16 pin)" `96 
v L "pin" 2 70 "int16" `99 
v L "level" 2 70 "int8" `100 
f B "output_bit" 2 70 "void(int16 pin,int8 level)" `98 
v L "pin" 2 71 "int16" `102 
f B "output_float" 2 71 "void(int16 pin)" `101 
v L "pin" 2 72 "int16" `104 
f B "output_drive" 2 72 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 76 "31744"
d G "PIN_A1" 2 77 "31745"
d G "PIN_A2" 2 78 "31746"
d G "PIN_A3" 2 79 "31747"
d G "PIN_A4" 2 80 "31748"
d G "PIN_A5" 2 81 "31749"
d G "PIN_A6" 2 82 "31750"
d G "PIN_B0" 2 84 "31752"
d G "PIN_B1" 2 85 "31753"
d G "PIN_B2" 2 86 "31754"
d G "PIN_B3" 2 87 "31755"
d G "PIN_B4" 2 88 "31756"
d G "PIN_B5" 2 89 "31757"
d G "PIN_B6" 2 90 "31758"
d G "PIN_B7" 2 91 "31759"
d G "PIN_C0" 2 93 "31760"
d G "PIN_C1" 2 94 "31761"
d G "PIN_C2" 2 95 "31762"
d G "PIN_C3" 2 96 "31763"
d G "PIN_C4" 2 97 "31764"
d G "PIN_C5" 2 98 "31765"
d G "PIN_C6" 2 99 "31766"
d G "PIN_C7" 2 100 "31767"
d G "PIN_D0" 2 102 "31768"
d G "PIN_D1" 2 103 "31769"
d G "PIN_D2" 2 104 "31770"
d G "PIN_D3" 2 105 "31771"
d G "PIN_D4" 2 106 "31772"
d G "PIN_D5" 2 107 "31773"
d G "PIN_D6" 2 108 "31774"
d G "PIN_D7" 2 109 "31775"
d G "PIN_E0" 2 111 "31776"
d G "PIN_E1" 2 112 "31777"
d G "PIN_E2" 2 113 "31778"
d G "FALSE" 2 116 "0"
d G "TRUE" 2 117 "1"
d G "BYTE" 2 119 "int8"
d G "BOOLEAN" 2 120 "int1"
d G "getc" 2 122 "getch"
d G "fgetc" 2 123 "getch"
d G "getchar" 2 124 "getch"
d G "putc" 2 125 "putchar"
d G "fputc" 2 126 "putchar"
d G "fgets" 2 127 "gets"
d G "fputs" 2 128 "puts"
c L "output_drive" 2 1 3 "FUNCTION"
f B "restart_cause" 2 133 "int8()" `105 
f B "reset_cpu" 2 134 "void()" `106 
f B "sleep" 2 135 "void()" `107  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 137 "7"
d G "MCLR_FROM_SLEEP" 2 138 "11"
d G "MCLR_FROM_RUN" 2 139 "15"
d G "NORMAL_POWER_UP" 2 140 "12"
d G "BROWNOUT_RESTART" 2 141 "14"
d G "WDT_FROM_SLEEP" 2 142 "3"
d G "RESET_INSTRUCTION" 2 143 "0"
c L "sleep" 2 1 5 "FUNCTION"
v L "mode" 2 150 "int8" `109 
f B "setup_timer_0" 2 150 "void(int8 mode)" `108 
v L "value" 2 151 "int16" `111 
f B "set_timer0" 2 151 "void(int16 value)" `110 
f B "get_timer0" 2 152 "int16()" `112 
v L "mode" 2 153 "int8" `114 
v L "prescaler" 2 153 "int8" `115 
f B "setup_counters" 2 153 "void(int8 mode,int8 prescaler)" `113 
v L "value" 2 154 "int16" `117 
f B "set_rtcc" 2 154 "void(int16 value)" `116 
f B "get_rtcc" 2 155 "int16()" `118  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 157 "0"
d G "T0_EXT_L_TO_H" 2 158 "32"
d G "T0_EXT_H_TO_L" 2 159 "48"
d G "T0_DIV_1" 2 161 "8"
d G "T0_DIV_2" 2 162 "0"
d G "T0_DIV_4" 2 163 "1"
d G "T0_DIV_8" 2 164 "2"
d G "T0_DIV_16" 2 165 "3"
d G "T0_DIV_32" 2 166 "4"
d G "T0_DIV_64" 2 167 "5"
d G "T0_DIV_128" 2 168 "6"
d G "T0_DIV_256" 2 169 "7"
d G "T0_OFF" 2 171 "0x80"
d G "T0_8_BIT" 2 173 "0x40"
d G "RTCC_INTERNAL" 2 175 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 176 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 177 "48"
d G "RTCC_DIV_1" 2 178 "8"
d G "RTCC_DIV_2" 2 179 "0"
d G "RTCC_DIV_4" 2 180 "1"
d G "RTCC_DIV_8" 2 181 "2"
d G "RTCC_DIV_16" 2 182 "3"
d G "RTCC_DIV_32" 2 183 "4"
d G "RTCC_DIV_64" 2 184 "5"
d G "RTCC_DIV_128" 2 185 "6"
d G "RTCC_DIV_256" 2 186 "7"
d G "RTCC_OFF" 2 187 "0x80"
d G "RTCC_8_BIT" 2 188 "0x40"
c L "get_rtcc" 2 1 8 "FUNCTION"
v L "mode" 2 199 "int16" `120 
f B "setup_wdt" 2 199 "void(int16 mode)" `119 
f B "restart_wdt" 2 200 "void()" `121  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 202 "0x100"
d G "WDT_OFF" 2 203 "0"
d G "WDT_18MS" 2 205 "0x300"
d G "WDT_36MS" 2 206 "0x500"
d G "WDT_72MS" 2 207 "0x700"
d G "WDT_144MS" 2 208 "0x900"
d G "WDT_288MS" 2 209 "0xB00"
d G "WDT_576MS" 2 210 "0xD00"
d G "WDT_1152MS" 2 211 "0xF00"
d G "WDT_2304MS" 2 212 "0x1108"
c L "restart_wdt" 2 1 3 "FUNCTION"
v L "mode" 2 218 "int16" `123 
f B "setup_timer_1" 2 218 "void(int16 mode)" `122 
f B "get_timer1" 2 219 "int16()" `124 
v L "value" 2 220 "int16" `126 
f B "set_timer1" 2 220 "void(int16 value)" `125  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 223 "0"
d G "T1_INTERNAL" 2 224 "0x85"
d G "T1_EXTERNAL" 2 225 "0x87"
d G "T1_EXTERNAL_SYNC" 2 226 "0x83"
d G "T1_CLK_OUT" 2 228 "8"
d G "T1_DIV_BY_1" 2 230 "0"
d G "T1_DIV_BY_2" 2 231 "0x10"
d G "T1_DIV_BY_4" 2 232 "0x20"
d G "T1_DIV_BY_8" 2 233 "0x30"
c L "set_timer1" 2 1 3 "FUNCTION"
v L "mode" 2 238 "int8" `128 
v L "period" 2 238 "int8" `129 
v L "postscale" 2 238 "int8" `130 
f B "setup_timer_2" 2 238 "void(int8 mode,int8 period,int8 postscale)" `127 
f B "get_timer2" 2 239 "int8()" `131 
v L "value" 2 240 "int8" `133 
f B "set_timer2" 2 240 "void(int8 value)" `132  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 242 "0"
d G "T2_DIV_BY_1" 2 243 "4"
d G "T2_DIV_BY_4" 2 244 "5"
d G "T2_DIV_BY_16" 2 245 "6"
c L "set_timer2" 2 1 3 "FUNCTION"
v L "mode" 2 250 "int16" `135 
f B "setup_timer_3" 2 250 "void(int16 mode)" `134 
f B "get_timer3" 2 251 "int16()" `136 
v L "value" 2 252 "int16" `138 
f B "set_timer3" 2 252 "void(int16 value)" `137  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 255 "0"
d G "T3_INTERNAL" 2 256 "0x85"
d G "T3_EXTERNAL" 2 257 "0x87"
d G "T3_EXTERNAL_SYNC" 2 258 "0x83"
d G "T3_DIV_BY_1" 2 260 "0"
d G "T3_DIV_BY_2" 2 261 "0x10"
d G "T3_DIV_BY_4" 2 262 "0x20"
d G "T3_DIV_BY_8" 2 263 "0x30"
c L "set_timer3" 2 1 4 "FUNCTION"
v L "mode" 2 269 "int32" `140 
f B "setup_ccp1" 2 269 "void(int32 mode)" `139 
v L "mode" 2 270 "int32" `142 
v L "pwm" 2 270 "int8" `143 
f G "setup_ccp1" 2 270 "void(int32 mode,int8 pwm)" `141 
v L "value" 2 271 "int16" `145 
f B "set_pwm1_duty" 2 271 "void(int16 value)" `144  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 273 "0"
d G "CCP_CAPTURE_FE" 2 274 "4"
d G "CCP_CAPTURE_RE" 2 275 "5"
d G "CCP_CAPTURE_DIV_4" 2 276 "6"
d G "CCP_CAPTURE_DIV_16" 2 277 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 2 278 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 279 "9"
d G "CCP_COMPARE_INT" 2 280 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 281 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 2 282 "0xB"
d G "CCP_PWM" 2 283 "0xC"
d G "CCP_PWM_PLUS_1" 2 284 "0x1c"
d G "CCP_PWM_PLUS_2" 2 285 "0x2c"
d G "CCP_PWM_PLUS_3" 2 286 "0x3c"
c L "set_pwm1_duty" 2 1 1 "FUNCTION"
d G "T3_CCP1_TO_2" 2 292 "0x48"
d G "T3_CCP2" 2 293 "0x8"
c L "set_pwm1_duty" 2 1 1 "FUNCTION"
v L "mode" 2 297 "int32" `150 
f B "setup_ccp2" 2 297 "void(int32 mode)" `149 
v L "mode" 2 298 "int32" `152 
v L "pwm" 2 298 "int8" `153 
f G "setup_ccp2" 2 298 "void(int32 mode,int8 pwm)" `151 
v L "value" 2 299 "int16" `155 
f B "set_pwm2_duty" 2 299 "void(int16 value)" `154 
c L "set_pwm2_duty" 2 1 5 "FUNCTION"
v L "mode" 2 308 "int8" `160 
f B "setup_psp" 2 308 "void(int8 mode)" `159 
f B "psp_output_full" 2 309 "int8()" `161 
f B "psp_input_full" 2 310 "int8()" `162 
f B "psp_overflow" 2 311 "int8()" `163  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 2 313 "0x10"
d G "PSP_DISABLED" 2 314 "0"
c L "psp_overflow" 2 1 3 "FUNCTION"
v L "mode" 2 321 "int32" `166 
f B "setup_spi" 2 321 "void(int32 mode)" `165 
v L "value" 2 322 "int8" `168 
f B "spi_write" 2 322 "void(int8 value)" `167 
f B "spi_read" 2 323 "int8()" `169 
v L "value" 2 324 "int8" `171 
f G "spi_read" 2 324 "int8(int8 value)" `170 
f B "spi_data_in" 2 325 "int8()" `172 
v L "mode" 2 326 "int32" `174 
f B "setup_spi2" 2 326 "void(int32 mode)" `173 
v L "value" 2 327 "int8" `176 
f B "spi_write2" 2 327 "void(int8 value)" `175 
f B "spi_read2" 2 328 "int8()" `177 
v L "value" 2 329 "int8" `179 
f G "spi_read2" 2 329 "int8(int8 value)" `178 
f B "spi_data_in2" 2 330 "int8()" `180  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 332 "0x00"
d G "SPI_MASTER" 2 333 "0x20"
d G "SPI_SLAVE" 2 334 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 335 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 336 "0x00"
d G "SPI_CLK_DIV_4" 2 337 "0x00"
d G "SPI_CLK_DIV_16" 2 338 "0x01"
d G "SPI_CLK_DIV_64" 2 339 "0x02"
d G "SPI_CLK_T2" 2 340 "0x03"
d G "SPI_SS_DISABLED" 2 341 "0x01"
d G "SPI_XMIT_L_TO_H" 2 343 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 344 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 346 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 347 "0x8000"
d G "SPI_L_TO_H" 2 350 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 351 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 2 1 2 "FUNCTION"
v L "baud" 2 355 "int32" `182 
f B "setup_uart" 2 355 "void(int32 baud)" `181 
v L "baud" 2 356 "int32" `184 
v L "stream" 2 356 "int8" `185 
f G "setup_uart" 2 356 "void(int32 baud,int8 stream)" `183 
v L "baud" 2 357 "int32" `187 
v L "stream" 2 357 "int8" `188 
v L "clock" 2 357 "int32" `189 
f G "setup_uart" 2 357 "void(int32 baud,int8 stream,int32 clock)" `186 
v L "baud" 2 358 "int32" `191 
f B "set_uart_speed" 2 358 "void(int32 baud)" `190 
v L "baud" 2 359 "int32" `193 
v L "stream" 2 359 "int8" `194 
f G "set_uart_speed" 2 359 "void(int32 baud,int8 stream)" `192 
v L "baud" 2 360 "int32" `196 
v L "stream" 2 360 "int8" `197 
v L "clock" 2 360 "int32" `198 
f G "set_uart_speed" 2 360 "void(int32 baud,int8 stream,int32 clock)" `195  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 364 "2"
d G "UART_DATA" 2 365 "4"
c L "set_uart_speed" 2 1 2 "FUNCTION"
v L "mode" 2 368 "int8" `200 
f B "setup_low_volt_detect" 2 368 "void(int8 mode)" `199  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 370 "0x1F"
d G "LVD_46" 2 371 "0x1E"
d G "LVD_43" 2 372 "0x1D"
d G "LVD_41" 2 373 "0x1C"
d G "LVD_40" 2 374 "0x1B"
d G "LVD_37" 2 375 "0x1A"
d G "LVD_36" 2 376 "0x19"
d G "LVD_34" 2 377 "0x18"
d G "LVD_31" 2 378 "0x17"
d G "LVD_29" 2 379 "0x16"
d G "LVD_28" 2 380 "0x15"
d G "LVD_26" 2 381 "0x14"
d G "LVD_25" 2 382 "0x13"
d G "LVD_23" 2 383 "0x12"
d G "LVD_21" 2 384 "0x11"
c L "setup_low_volt_detect" 2 1 2 "FUNCTION"
v L "mode" 2 390 "int8" `202 
f B "setup_oscillator" 2 390 "void(int8 mode)" `201  "Constants used in setup_oscillator() are:"
d G "OSC_TIMER1" 2 392 "1"
d G "OSC_NORMAL" 2 393 "0"
c L "setup_oscillator" 2 1 4 "FUNCTION"
v L "mode" 2 400 "int32" `204 
f B "setup_adc" 2 400 "void(int32 mode)" `203 
f B "read_adc" 2 401 "int8()" `205 
v L "mode" 2 402 "int8" `207 
f G "read_adc" 2 402 "int8(int8 mode)" `206 
f G "read_adc" 2 403 "int16()" `208 
v L "mode" 2 404 "int8" `210 
f G "read_adc" 2 404 "int16(int8 mode)" `209 
f B "adc_done" 2 405 "int8()" `211  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 407 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 408 "0x10000"
d G "ADC_CLOCK_DIV_4" 2 409 "0x4000"
d G "ADC_CLOCK_DIV_8" 2 410 "0x0040"
d G "ADC_CLOCK_DIV_16" 2 411 "0x4040"
d G "ADC_CLOCK_DIV_32" 2 412 "0x0080"
d G "ADC_CLOCK_DIV_64" 2 413 "0x4080"
d G "ADC_CLOCK_INTERNAL" 2 414 "0x00c0" "Internal 2-6us"
c L "adc_done" 2 1 1 "FUNCTION"
v L "setting" 2 417 "int8" `213 
f B "setup_adc_ports" 2 417 "void(int8 setting)" `212 
v L "channel" 2 418 "int8" `215 
f B "set_adc_channel" 2 418 "void(int8 channel)" `214  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 2 420 "7" "None"
d G "ALL_ANALOG" 2 421 "0" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_AN1_AN2_AN4_AN5_AN6_AN7_VSS_VREF" 2 422 "1" "A0 A1 A2 A5 E0 E1 E2 VRefh=A3"
d G "AN0_AN1_AN2_AN3_AN4" 2 423 "2" "A0 A1 A2 A3 A5"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 2 424 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 2 425 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 2 426 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_AN5_AN6_AN7_VREF_VREF" 2 427 "0x08" "A0 A1 A5 E0 E1 E2 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN2_AN3_AN4_AN5" 2 428 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_AN1_AN2_AN4_AN5_VSS_VREF" 2 429 "0x0A" "A0 A1 A2 A5 E0 VRefh=A3"
d G "AN0_AN1_AN4_AN5_VREF_VREF" 2 430 "0x0B" "A0 A1 A5 E0 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN4_VREF_VREF" 2 431 "0x0C" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 2 432 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 2 433 "0x0E" "A0"
d G "AN0_VREF_VREF" 2 434 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 2 435 "0x1" "!old only provided for compatibility"
d G "A_ANALOG" 2 436 "0x2" "!old only provided for compatibility"
d G "A_ANALOG_RA3_REF" 2 437 "0x3" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 2 438 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 2 439 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 2 440 "0x8" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2" 2 441 "0x9" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3" 2 442 "0xA" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3_RA2" 2 443 "0xB" "!old only provided for compatibility"
d G "A_ANALOG_RA3_RA2_REF" 2 444 "0xC" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 2 445 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 2 446 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 2 447 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 2 450 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 451 "1"
d G "ADC_READ_ONLY" 2 452 "6"
c L "set_adc_channel" 2 1 3 "FUNCTION"
v L "x" 2 458 "sint8" `217 
f B "abs" 2 458 "sint8(sint8 x)" `216 
v L "x" 2 459 "sint16" `219 
f G "abs" 2 459 "sint16(sint16 x)" `218 
v L "x" 2 460 "sint32" `221 
f G "abs" 2 460 "sint32(sint32 x)" `220 
v L "x" 2 461 "float" `223 
f G "abs" 2 461 "float(float x)" `222 
v L "??65535" 2 462 "int8" `225 
v L "??65535" 2 462 "int8" `226 
f B "_mul" 2 462 "int16(int8 ,int8 )" `224 
v L "??65535" 2 463 "sint8" `225 
v L "??65535" 2 463 "sint8" `229 
f G "_mul" 2 463 "sint16(sint8 ,sint8 )" `227 
v L "??65535" 2 464 "int16" `225 
v L "??65535" 2 464 "int16" `232 
f G "_mul" 2 464 "int32(int16 ,int16 )" `230 
v L "??65535" 2 465 "sint16" `225 
v L "??65535" 2 465 "sint16" `235 
f G "_mul" 2 465 "sint32(sint16 ,sint16 )" `233  "Memory Manipulation Prototypes:"
v L "bank" 2 468 "int8" `237 
v L "offset" 2 468 "int8" `238 
f B "read_bank" 2 468 "int8(int8 bank,int8 offset)" `236 
v L "bank" 2 469 "int8" `240 
v L "offset" 2 469 "int8" `241 
v L "value" 2 469 "int8" `242 
f B "write_bank" 2 469 "void(int8 bank,int8 offset,int8 value)" `239 
v L "dest" 2 470 "*int8" `244 
v L "src" 2 470 "*int8" `245 
f B "strcpy" 2 470 "void(*int8 dest,*int8 src)" `243 
v L "dest" 2 471 "*int8" `247 
v L "src" 2 471 "*int8" `248 
f B "strcopy" 2 471 "void(*int8 dest,*int8 src)" `246 
v L "destination" 2 472 "*int8" `250 
v L "value" 2 472 "int8" `251 
v L "num" 2 472 "int16" `252 
f B "memset" 2 472 "void(*int8 destination,int8 value,int16 num)" `249 
v L "destination" 2 473 "*int8" `254 
v L "source" 2 473 "*int8" `255 
v L "num" 2 473 "int16" `256 
f B "memcpy" 2 473 "void(*int8 destination,*int8 source,int16 num)" `253  "String Prototypes:"
v L "cvalue" 2 476 "int8" `258 
f B "toupper" 2 476 "int8(int8 cvalue)" `257 
v L "cvalue" 2 477 "int8" `260 
f B "tolower" 2 477 "int8(int8 cvalue)" `259 
v L "string" 2 478 "*int8" `262 
v L "cstring" 2 478 "*int8" `263 
f B "sprintf" 2 478 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `261  "Data Manipulators Prototypes:"
v L "address" 2 481 "*int8" `266 
v L "bytes" 2 481 "int8" `267 
v L "value" 2 481 "int8" `268 
f B "shift_left" 2 481 "int8(*int8 address,int8 bytes,int8 value)" `265 
v L "address" 2 482 "*int8" `270 
v L "bytes" 2 482 "int8" `271 
v L "value" 2 482 "int8" `272 
f B "shift_right" 2 482 "int8(*int8 address,int8 bytes,int8 value)" `269 
v L "address" 2 483 "*int8" `274 
v L "bytes" 2 483 "int8" `275 
f B "rotate_left" 2 483 "void(*int8 address,int8 bytes)" `273 
v L "address" 2 484 "*int8" `277 
v L "bytes" 2 484 "int8" `278 
f B "rotate_right" 2 484 "void(*int8 address,int8 bytes)" `276 
v L "value" 2 485 "int8" `280 
f B "swap" 2 485 "void(int8 value)" `279 
v L "var" 2 486 "int16" `282 
v L "offset" 2 486 "int8" `283 
f B "make8" 2 486 "int8(int16 var,int8 offset)" `281 
v L "var" 2 487 "int32" `282 
v L "offset" 2 487 "int8" `286 
f G "make8" 2 487 "int8(int32 var,int8 offset)" `284 
v L "varhigh" 2 488 "int8" `288 
v L "varlow" 2 488 "int8" `289 
f B "make16" 2 488 "int16(int8 varhigh,int8 varlow)" `287 
v L "var1" 2 489 "int16" `291 
f B "make32" 2 489 "int32(int16 var1)" `290 
v L "var1" 2 490 "int16" `293 
v L "var2" 2 490 "int16" `294 
f G "make32" 2 490 "int32(int16 var1,int16 var2)" `292 
v L "var1" 2 491 "int16" `293 
v L "var2" 2 491 "int8" `297 
f G "make32" 2 491 "int32(int16 var1,int8 var2)" `295 
v L "var1" 2 492 "int16" `299 
v L "var2" 2 492 "int8" `300 
v L "var3" 2 492 "int8" `301 
f G "make32" 2 492 "int32(int16 var1,int8 var2,int8 var3)" `298 
v L "var1" 2 493 "int8" `303 
f G "make32" 2 493 "int32(int8 var1)" `302 
v L "var1" 2 494 "int8" `293 
v L "var2" 2 494 "int8" `306 
f G "make32" 2 494 "int32(int8 var1,int8 var2)" `304 
v L "var1" 2 495 "int8" `299 
v L "var2" 2 495 "int8" `300 
v L "var3" 2 495 "int8" `310 
f G "make32" 2 495 "int32(int8 var1,int8 var2,int8 var3)" `307 
v L "var1" 2 496 "int8" `312 
v L "var2" 2 496 "int8" `313 
v L "var3" 2 496 "int8" `314 
v L "var4" 2 496 "int8" `315 
f G "make32" 2 496 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `311 
v L "var1" 2 497 "int8" `293 
v L "var2" 2 497 "int16" `318 
f G "make32" 2 497 "int32(int8 var1,int16 var2)" `316 
v L "var1" 2 498 "int8" `299 
v L "var2" 2 498 "int16" `300 
v L "var3" 2 498 "int8" `322 
f G "make32" 2 498 "int32(int8 var1,int16 var2,int8 var3)" `319 
v L "var1" 2 499 "int8" `299 
v L "var2" 2 499 "int8" `300 
v L "var3" 2 499 "int16" `326 
f G "make32" 2 499 "int32(int8 var1,int8 var2,int16 var3)" `323 
v L "var" 2 500 "int8" `328 
v L "bit" 2 500 "int8" `329 
f B "bit_set" 2 500 "void(int8 var,int8 bit)" `327 
v L "var" 2 501 "int16" `328 
v L "bit" 2 501 "int8" `332 
f G "bit_set" 2 501 "void(int16 var,int8 bit)" `330 
v L "var" 2 502 "int32" `328 
v L "bit" 2 502 "int8" `335 
f G "bit_set" 2 502 "void(int32 var,int8 bit)" `333 
v L "var" 2 503 "int8" `337 
v L "bit" 2 503 "int8" `338 
f B "bit_clear" 2 503 "void(int8 var,int8 bit)" `336 
v L "var" 2 504 "int16" `337 
v L "bit" 2 504 "int8" `341 
f G "bit_clear" 2 504 "void(int16 var,int8 bit)" `339 
v L "var" 2 505 "int32" `337 
v L "bit" 2 505 "int8" `344 
f G "bit_clear" 2 505 "void(int32 var,int8 bit)" `342 
v L "var" 2 506 "int8" `346 
v L "bit" 2 506 "int8" `347 
f B "bit_test" 2 506 "int8(int8 var,int8 bit)" `345 
v L "var" 2 507 "int16" `346 
v L "bit" 2 507 "int8" `350 
f G "bit_test" 2 507 "int8(int16 var,int8 bit)" `348 
v L "var" 2 508 "int32" `346 
v L "bit" 2 508 "int8" `353 
f G "bit_test" 2 508 "int8(int32 var,int8 bit)" `351  "#use delay() Prototypes:"
v L "count" 2 511 "int8" `355 
f B "delay_cycles" 2 511 "void(int8 count)" `354 
v L "time" 2 512 "int16" `357 
f B "delay_ms" 2 512 "void(int16 time)" `356 
v L "time" 2 513 "int16" `359 
f B "delay_us" 2 513 "void(int16 time)" `358  "#use rs232() Prototypes:"
v L "cdata" 2 516 "int8" `361 
f B "putchar" 2 516 "void(int8 cdata)" `360 
v L "cdata" 2 517 "int8" `363 
v L "stream" 2 517 "int8" `364 
f G "putchar" 2 517 "void(int8 cdata,int8 stream)" `362 
v L "string" 2 518 "*int8" `366 
f B "puts" 2 518 "void(*int8 string)" `365 
v L "string" 2 519 "*int8" `368 
v L "stream" 2 519 "int8" `369 
f G "puts" 2 519 "void(*int8 string,int8 stream)" `367 
f B "getch" 2 520 "int8()" `370 
v L "stream" 2 521 "int8" `372 
f G "getch" 2 521 "int8(int8 stream)" `371 
v L "string" 2 522 "*int8" `374 
f B "gets" 2 522 "void(*int8 string)" `373 
v L "string" 2 523 "*int8" `376 
v L "stream" 2 523 "int8" `377 
f G "gets" 2 523 "void(*int8 string,int8 stream)" `375 
f B "kbhit" 2 524 "int8()" `378 
v L "stream" 2 525 "int8" `380 
f G "kbhit" 2 525 "int8(int8 stream)" `379 
v L "string" 2 526 "*int8" `382 
f B "printf" 2 526 "void(*int8 string,*int8 _VA_LIST)" `381 
v L "stream" 2 527 "int8" `385 
v L "string" 2 527 "*int8" `386 
f B "fprintf" 2 527 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `384 
f B "putc_send" 2 528 "void()" `388 
v L "stream" 2 529 "int8" `390 
f B "fputc_send" 2 529 "void(int8 stream)" `389 
f B "rcv_buffer_full" 2 530 "int8()" `391 
v L "stream" 2 531 "int8" `393 
f G "rcv_buffer_full" 2 531 "int8(int8 stream)" `392 
f B "rcv_buffer_bytes" 2 532 "int16()" `394 
v L "stream" 2 533 "int8" `396 
f G "rcv_buffer_bytes" 2 533 "int16(int8 stream)" `395 
f B "tx_buffer_full" 2 534 "int8()" `397 
v L "stream" 2 535 "int8" `399 
f G "tx_buffer_full" 2 535 "int8(int8 stream)" `398 
f B "tx_buffer_bytes" 2 536 "int16()" `400 
v L "stream" 2 537 "int8" `402 
f G "tx_buffer_bytes" 2 537 "int16(int8 stream)" `401  "#use i2c() Prototypes:"
f B "i2c_read" 2 540 "int8()" `403 
v L "stream" 2 541 "int8" `405 
f G "i2c_read" 2 541 "int8(int8 stream)" `404 
v L "stream" 2 542 "int8" `407 
v L "ack" 2 542 "int8" `408 
f G "i2c_read" 2 542 "int8(int8 stream,int8 ack)" `406 
v L "data" 2 543 "int8" `410 
f B "i2c_write" 2 543 "int8(int8 data)" `409 
v L "stream" 2 544 "int8" `412 
v L "data" 2 544 "int8" `413 
f G "i2c_write" 2 544 "int8(int8 stream,int8 data)" `411 
f B "i2c_start" 2 545 "void()" `414 
v L "stream" 2 546 "int8" `416 
f G "i2c_start" 2 546 "void(int8 stream)" `415 
v L "stream" 2 547 "int8" `418 
v L "restart" 2 547 "int8" `419 
f G "i2c_start" 2 547 "void(int8 stream,int8 restart)" `417 
f B "i2c_stop" 2 548 "void()" `420 
v L "stream" 2 549 "int8" `422 
f G "i2c_stop" 2 549 "void(int8 stream)" `421 
f B "i2c_isr_state" 2 550 "int8()" `423 
v L "addr" 2 551 "int8" `425 
f B "i2c_slaveaddr" 2 551 "void(int8 addr)" `424 
v L "stream" 2 552 "int8" `427 
v L "addr" 2 552 "int8" `428 
f G "i2c_slaveaddr" 2 552 "void(int8 stream,int8 addr)" `426 
f B "i2c_poll" 2 553 "int8()" `429 
v L "stream" 2 554 "int8" `431 
f G "i2c_poll" 2 554 "int8(int8 stream)" `430 
v L "baud" 2 555 "int32" `433 
f B "i2c_init" 2 555 "void(int32 baud)" `432 
v L "stream" 2 556 "int8" `435 
v L "baud" 2 556 "int32" `436 
f G "i2c_init" 2 556 "void(int8 stream,int32 baud)" `434  "#use spi() Prototypes:"
f B "spi_xfer" 2 559 "int8()" `437 
f G "spi_xfer" 2 560 "int16()" `438 
f G "spi_xfer" 2 561 "int32()" `439 
v L "data" 2 562 "int8" `441 
f G "spi_xfer" 2 562 "int8(int8 data)" `440 
v L "data" 2 563 "int16" `443 
f G "spi_xfer" 2 563 "int16(int16 data)" `442 
v L "data" 2 564 "int32" `445 
f G "spi_xfer" 2 564 "int32(int32 data)" `444 
v L "stream" 2 565 "int8" `447 
v L "data" 2 565 "int8" `448 
f G "spi_xfer" 2 565 "int8(int8 stream,int8 data)" `446 
v L "stream" 2 566 "int8" `447 
v L "data" 2 566 "int16" `451 
f G "spi_xfer" 2 566 "int16(int8 stream,int16 data)" `449 
v L "stream" 2 567 "int8" `447 
v L "data" 2 567 "int32" `454 
f G "spi_xfer" 2 567 "int32(int8 stream,int32 data)" `452 
v L "stream" 2 568 "int8" `456 
v L "data" 2 568 "int8" `457 
v L "bits" 2 568 "int8" `458 
f G "spi_xfer" 2 568 "int8(int8 stream,int8 data,int8 bits)" `455 
v L "stream" 2 569 "int8" `456 
v L "data" 2 569 "int16" `457 
v L "bits" 2 569 "int8" `462 
f G "spi_xfer" 2 569 "int16(int8 stream,int16 data,int8 bits)" `459 
v L "stream" 2 570 "int8" `456 
v L "data" 2 570 "int32" `457 
v L "bits" 2 570 "int8" `466 
f G "spi_xfer" 2 570 "int32(int8 stream,int32 data,int8 bits)" `463 
v L "baud" 2 571 "int32" `468 
f B "spi_init" 2 571 "void(int32 baud)" `467 
v L "stream" 2 572 "int8" `470 
v L "baud" 2 572 "int32" `471 
f G "spi_init" 2 572 "void(int8 stream,int32 baud)" `469 
v L "baud" 2 573 "int32" `473 
f B "spi_speed" 2 573 "void(int32 baud)" `472 
v L "stream" 2 574 "int8" `475 
v L "baud" 2 574 "int32" `476 
f G "spi_speed" 2 574 "void(int8 stream,int32 baud)" `474 
v L "stream" 2 575 "int8" `478 
v L "baud" 2 575 "int32" `479 
v L "clock" 2 575 "int32" `480 
f G "spi_speed" 2 575 "void(int8 stream,int32 baud,int32 clock)" `477 
v L "data" 2 576 "int8" `482 
f B "spi_prewrite" 2 576 "void(int8 data)" `481 
v L "data" 2 577 "int16" `484 
f G "spi_prewrite" 2 577 "void(int16 data)" `483 
v L "data" 2 578 "int32" `486 
f G "spi_prewrite" 2 578 "void(int32 data)" `485 
v L "??65535" 2 579 "int8" `488 
v L "data" 2 579 "int8" `489 
f G "spi_prewrite" 2 579 "void(int8 ,int8 data)" `487 
v L "??65535" 2 580 "int8" `488 
v L "data" 2 580 "int16" `492 
f G "spi_prewrite" 2 580 "void(int8 ,int16 data)" `490 
v L "??65535" 2 581 "int8" `488 
v L "data" 2 581 "int32" `495 
f G "spi_prewrite" 2 581 "void(int8 ,int32 data)" `493 
f B "spi_xfer_in" 2 582 "int8()" `496 
f G "spi_xfer_in" 2 583 "int16()" `497 
f G "spi_xfer_in" 2 584 "int32()" `498 
v L "bits" 2 585 "int8" `500 
f G "spi_xfer_in" 2 585 "int8(int8 bits)" `499 
v L "bits" 2 586 "int8" `502 
f G "spi_xfer_in" 2 586 "int16(int8 bits)" `501 
v L "bits" 2 587 "int8" `504 
f G "spi_xfer_in" 2 587 "int32(int8 bits)" `503 
v L "stream" 2 588 "int8" `506 
v L "bits" 2 588 "int8" `507 
f G "spi_xfer_in" 2 588 "int8(int8 stream,int8 bits)" `505 
v L "stream" 2 589 "int8" `506 
v L "bits" 2 589 "int8" `510 
f G "spi_xfer_in" 2 589 "int16(int8 stream,int8 bits)" `508 
v L "stream" 2 590 "int8" `506 
v L "bits" 2 590 "int8" `513 
f G "spi_xfer_in" 2 590 "int32(int8 stream,int8 bits)" `511  "#use rtos() Prototypes:"
f B "rtos_run" 2 593 "void()" `514 
f B "rtos_yield" 2 594 "void()" `515 
v L "task" 2 595 "int8" `517 
f B "rtos_enable" 2 595 "void(int8 task)" `516 
v L "task" 2 596 "int8" `519 
f B "rtos_disable" 2 596 "void(int8 task)" `518 
f B "rtos_terminate" 2 597 "void()" `520 
v L "flag" 2 598 "int8" `522 
f B "rtos_await" 2 598 "void(int8 flag)" `521 
v L "sem" 2 599 "int8" `524 
f B "rtos_wait" 2 599 "void(int8 sem)" `523 
v L "sem" 2 600 "int8" `526 
f B "rtos_signal" 2 600 "void(int8 sem)" `525 
v L "task" 2 601 "int8" `528 
v L "msg" 2 601 "int8" `529 
f B "rtos_msg_send" 2 601 "void(int8 task,int8 msg)" `527 
f B "rtos_msg_read" 2 602 "int8()" `530 
f B "rtos_msg_poll" 2 603 "int8()" `531 
v L "task" 2 604 "int8" `533 
f B "rtos_overrun" 2 604 "int8(int8 task)" `532 
v L "task" 2 605 "int8" `535 
v L "stat" 2 605 "*int8" `536 
f B "rtos_stats" 2 605 "void(int8 task,*int8 stat)" `534  "#use timer() Prototypes:"
f B "get_ticks" 2 608 "int8()" `537 
f G "get_ticks" 2 609 "int16()" `538 
f G "get_ticks" 2 610 "int32()" `539 
v L "stream" 2 611 "int8" `541 
f G "get_ticks" 2 611 "int8(int8 stream)" `540 
v L "stream" 2 612 "int8" `543 
f G "get_ticks" 2 612 "int16(int8 stream)" `542 
v L "stream" 2 613 "int8" `545 
f G "get_ticks" 2 613 "int32(int8 stream)" `544 
v L "value" 2 614 "int8" `547 
f B "set_ticks" 2 614 "void(int8 value)" `546 
v L "value" 2 615 "int16" `549 
f G "set_ticks" 2 615 "void(int16 value)" `548 
v L "value" 2 616 "int32" `551 
f G "set_ticks" 2 616 "void(int32 value)" `550 
v L "stream" 2 617 "int8" `553 
v L "value" 2 617 "int8" `554 
f G "set_ticks" 2 617 "void(int8 stream,int8 value)" `552 
v L "stream" 2 618 "int8" `553 
v L "value" 2 618 "int16" `557 
f G "set_ticks" 2 618 "void(int8 stream,int16 value)" `555 
v L "stream" 2 619 "int8" `553 
v L "value" 2 619 "int32" `560 
f G "set_ticks" 2 619 "void(int8 stream,int32 value)" `558  "#use pwm() Prototypes:"
f B "pwm_on" 2 622 "void()" `561 
v L "stream" 2 623 "int8" `563 
f G "pwm_on" 2 623 "void(int8 stream)" `562 
f B "pwm_off" 2 624 "void()" `564 
v L "stream" 2 625 "int8" `566 
f G "pwm_off" 2 625 "void(int8 stream)" `565 
v L "duty" 2 626 "int16" `568 
f B "pwm_set_duty" 2 626 "void(int16 duty)" `567 
v L "stream" 2 627 "int8" `570 
v L "duty" 2 627 "int16" `571 
f G "pwm_set_duty" 2 627 "void(int8 stream,int16 duty)" `569 
v L "percent" 2 628 "int16" `573 
f B "pwm_set_duty_percent" 2 628 "void(int16 percent)" `572 
v L "stream" 2 629 "int8" `575 
v L "percent" 2 629 "int16" `576 
f G "pwm_set_duty_percent" 2 629 "void(int8 stream,int16 percent)" `574 
v L "frequency" 2 630 "int32" `578 
f B "pwm_set_frequency" 2 630 "void(int32 frequency)" `577 
v L "stream" 2 631 "int8" `580 
v L "frequency" 2 631 "int32" `581 
f G "pwm_set_frequency" 2 631 "void(int8 stream,int32 frequency)" `579  "#use capture() Prototypes:"
f B "get_capture_time" 2 634 "int16()" `582 
v L "stream" 2 635 "int8" `584 
f G "get_capture_time" 2 635 "int16(int8 stream)" `583 
f B "get_capture_event" 2 636 "int8()" `585 
v L "stream" 2 637 "int8" `587 
f G "get_capture_event" 2 637 "int8(int8 stream)" `586  "Enviroment Prototypes:"
c L "get_capture_event" 2 1 2 "FUNCTION"
v L "address" 2 650 "int16" `589 
f B "goto_address" 2 650 "void(int16 address)" `588 
v L "label" 2 651 "int16" `591 
f B "label_address" 2 651 "int16(int16 label)" `590  "Program Memory Prototypes:"
v L "address" 2 654 "int16" `593 
v L "dataptr" 2 654 "*int8" `594 
v L "count" 2 654 "int16" `595 
f B "read_program_memory" 2 654 "void(int16 address,*int8 dataptr,int16 count)" `592 
v L "address" 2 655 "int16" `597 
f B "read_program_eeprom" 2 655 "int16(int16 address)" `596 
v L "address" 2 656 "int16" `599 
f B "erase_program_eeprom" 2 656 "void(int16 address)" `598 
v L "address" 2 657 "int16" `601 
v L "dataptr" 2 657 "*int8" `602 
v L "count" 2 657 "int16" `603 
f B "write_program_memory" 2 657 "void(int16 address,*int8 dataptr,int16 count)" `600 
v L "address" 2 658 "int16" `605 
v L "data" 2 658 "int16" `606 
f B "write_program_eeprom" 2 658 "void(int16 address,int16 data)" `604  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 663 "int16" `607 
v L "address" 2 668 "__EEADDRESS__" `609 
f B "read_eeprom" 2 668 "int8(__EEADDRESS__ address)" `608 
v L "address" 2 669 "__EEADDRESS__" `611 
v L "value" 2 669 "int8" `612 
f B "write_eeprom" 2 669 "void(__EEADDRESS__ address,int8 value)" `610  "INT"
c L "write_eeprom" 2 1 4 "FUNCTION"
v L "interrupt" 2 676 "int32" `614 
f B "enable_interrupts" 2 676 "void(int32 interrupt)" `613 
v L "interrupt" 2 677 "int32" `616 
f B "disable_interrupts" 2 677 "void(int32 interrupt)" `615 
v L "interrupt" 2 678 "int32" `618 
f B "clear_interrupt" 2 678 "void(int32 interrupt)" `617 
v L "interrupt" 2 679 "int32" `620 
f B "interrupt_active" 2 679 "int8(int32 interrupt)" `619 
v L "interrupt" 2 680 "int32" `622 
f B "interrupt_enabled" 2 680 "int8(int32 interrupt)" `621 
v L "source" 2 681 "int8" `624 
v L "edge" 2 681 "int8" `625 
f B "ext_int_edge" 2 681 "void(int8 source,int8 edge)" `623 
v L "address" 2 682 "int16" `627 
f B "jump_to_irs" 2 682 "void(int16 address)" `626  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 684 "0x40"
d G "H_TO_L" 2 685 "0"
d G "GLOBAL" 2 687 "0xF2C0"
d G "PERIPH" 2 688 "0xF240"
d G "INT_RTCC" 2 689 "0x00F220"
d G "INT_TIMER0" 2 690 "0x00F220"
d G "INT_TIMER1" 2 691 "0x009D01"
d G "INT_TIMER2" 2 692 "0x009D02"
d G "INT_TIMER3" 2 693 "0x00A002"
d G "INT_EXT_L2H" 2 694 "0x5000F210"
d G "INT_EXT_H2L" 2 695 "0x6000F210"
d G "INT_EXT" 2 696 "0x00F210"
d G "INT_EXT1_L2H" 2 697 "0x5001F008"
d G "INT_EXT1_H2L" 2 698 "0x6001F008"
d G "INT_EXT1" 2 699 "0x00F008"
d G "INT_EXT2_L2H" 2 700 "0x5002F010"
d G "INT_EXT2_H2L" 2 701 "0x6002F010"
d G "INT_EXT2" 2 702 "0x00F010"
d G "INT_RB" 2 703 "0x00FFF208"
d G "INT_PSP" 2 704 "0x009D80"
d G "INT_AD" 2 705 "0x009D40"
d G "INT_RDA" 2 706 "0x009D20"
d G "INT_TBE" 2 707 "0x009D10"
d G "INT_SSP" 2 708 "0x009D08"
d G "INT_CCP1" 2 709 "0x009D04"
d G "INT_CCP2" 2 710 "0x00A001"
d G "INT_BUSCOL" 2 711 "0x00A008"
d G "INT_LOWVOLT" 2 712 "0x00A004"
d G "INT_EEPROM" 2 713 "0x00A010"
C L "jump_to_irs" 1 13 1 "FUNCTION"
D G "_STDLIB" 3 12 ""
D G "RAND_MAX" 3 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 3 25 "1"
T G "div_t" 3 33 "{sint8 quot,sint8 rem}" `641 
T G "ldiv_t" 3 38 "{sint16 quot,sint16 rem}" `645  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 24 "unsigned int16"
D G "wchar_t" 4 26 "char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
C L "jump_to_irs" 3 43 2 "FUNCTION"
C L "jump_to_irs" 3 46 1 "*"
C L "jump_to_irs" 3 46 1 "*"
V L "s" 3 50 "*int8" `647 
f G "atoi" 3 50 "sint8(*int8 s)" `646  "Syntax: signed int32  atoi32(char * s)"
V L "s" 3 58 "*int8" `649 
f G "atoi32" 3 58 "sint32(*int8 s,*int8 s1,*int8 s2)" `648  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 3 46 2 "FUNCTION"
V L "num" 3 79 "sint32" `651 
V L "base" 3 79 "int8" `652 
V L "s" 3 79 "*int8" `653 
f G "itoa" 3 79 "*int8(sint32 num,int8 base,*int8 s,*int8 s1,*int8 s2,int16 n)" `650  "Standard template: signed int16  atol(char * s)"
C L "itoa" 3 81 1 "*"
C L "itoa" 3 81 1 "*"
V L "s" 3 85 "*int8" `655 
f G "atol" 3 85 "sint16(*int8 s,int16 n)" `654  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 3 87 1 "*"
C L "atol" 3 87 1 "*"
C L "atol" 3 87 1 "*"
C L "atol" 3 87 1 "*"
V L "s" 3 93 "*int8" `657 
V L "endptr" 3 93 "*int8" `658 
V L "base" 3 93 "sint8" `659 
f G "strtol" 3 93 "sint16(*int8 s,*int8 endptr,sint8 base,*int8 s2,int16 n)" `656  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 3 95 1 "*"
C L "strtol" 3 95 1 "*"
C L "strtol" 3 95 1 "*"
C L "strtol" 3 95 1 "*"
V L "s" 3 101 "*int8" `661 
V L "endptr" 3 101 "*int8" `662 
V L "base" 3 101 "sint8" `663 
f G "strtoul" 3 101 "int16(*int8 s,*int8 endptr,sint8 base)" `660  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 3 95 2 "FUNCTION"
C L "strtoul" 3 103 1 "*"
C L "strtoul" 3 103 1 "*"
C L "strtoul" 3 103 1 "*"
V L "s" 3 110 "*int8" `665 
V L "endptr" 3 110 "*int8" `666 
f G "strtof" 3 110 "float(*int8 s,*int8 endptr)" `664  "provided for compatibility"
D G "strtof48" 3 116 "(s, e) strtof(s, e)"
D G "strtod" 3 117 "(s, e) strtof(s, e)"
C L "strtof" 3 103 1 "FUNCTION"
C L "strtof" 3 120 1 "*"
D G "atof" 3 124 "(s)   strtof(s, 0)"
C L "strtof" 3 120 1 "FUNCTION"
C L "strtof" 3 143 1 "*"
C L "strtof" 3 143 1 "*"
C L "strtof" 3 143 1 "*"
V L "s" 3 149 "*int8" `668 
f G "atoe" 3 149 "float(*int8 s,*int8 strtoul)" `667  "Pseudo-random sequence generation functions"
C L "atoe" 3 143 1 "FUNCTION"
C L "atoe" 3 160 1 "*"
C L "atoe" 3 160 1 "*"
C L "atoe" 3 160 1 "*"
C L "atoe" 3 160 1 "*"
C L "atoe" 3 160 1 "*"
f G "rand" 3 169 "int16()" `669  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
V L "seed" 3 191 "int32" `671 
f G "srand" 3 191 "void(int32 seed,*int8 strtoul,int16 strtof)" `670  "Memory management functions"
C L "srand" 3 171 3 "FUNCTION"
V L "string" 3 205 "*int8" `673 
f G "system" 3 205 "sint8(*int8 string)" `672  "Searching and sorting utilities"
C L "system" 3 171 1 "FUNCTION"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 4 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
D G "labs" 3 249 "abs"
V L "numer" 3 251 "sint8" `675 
V L "denom" 3 251 "sint8" `676 
f G "div" 3 251 "div_t(sint8 numer,sint8 denom,int16 strtof)" `674 
V L "numer" 3 252 "sint16" `678 
V L "denom" 3 252 "sint16" `679 
f G "ldiv" 3 252 "ldiv_t(sint16 numer,sint16 denom)" `677  "Multibyte character functions"
C L "ldiv" 3 229 4 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
D G "_STRING" 5 12 ""
C L "ldiv" 4 2 7 "FUNCTION"
D G "_CTYPE" 6 12 ""
D G "islower" 6 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 6 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 6 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 6 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 6 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 6 19 "(x)  ((x)==' ')"
D G "isxdigit" 6 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 6 21 "(x)  ((x)<' ')"
D G "isprint" 6 22 "(x)  ((x)>=' ')"
D G "isgraph" 6 23 "(x)  ((x)>' ')"
D G "ispunct" 6 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 5 19 10 "FUNCTION"
V L "s1" 5 34 "*int8" `681 
V L "s2" 5 34 "*int8" `682 
V L "n" 5 34 "int16" `683 
F G "memmove" 5 35 "*int8(*int8 s1,*int8 s2,int16 n)" `680 
V L "sc1" 5 36 "*int8" `684 
V L "sc2" 5 37 "*int8" `685 
D G "strcopy" 5 54 "strcpy"
C L "strncpy" 5 19 4 "FUNCTION"
V L "s1" 5 61 "*int8" `687 
V L "s2" 5 61 "*int8" `688 
V L "n" 5 61 "int16" `689 
F G "strncpy" 5 62 "*int8(*int8 s1,*int8 s2,int16 n,*int8 endptr,*int8 strtoul)" `686 
V L "s" 5 63 "*int8" `690 
C L "strcat" 5 19 3 "FUNCTION"
V L "s1" 5 78 "*int8" `692 
V L "s2" 5 78 "*int8" `693 
F G "strcat" 5 79 "*int8(*int8 s1,*int8 s2)" `691 
V L "s" 5 80 "*int8" `694 
C L "strncat" 5 19 2 "FUNCTION"
V L "s1" 5 96 "*int8" `696 
V L "s2" 5 96 "*int8" `697 
V L "n" 5 96 "int16" `698 
F G "strncat" 5 97 "*int8(*int8 s1,*int8 s2,int16 n)" `695 
V L "s" 5 98 "*int8" `699 
C L "memcmp" 5 19 3 "FUNCTION"
V L "s1" 5 120 "*int8" `701 
V L "s2" 5 120 "*int8" `702 
V L "n" 5 120 "int16" `703 
F G "memcmp" 5 121 "sint8(*int8 s1,*int8 s2,int16 n,*int8 endptr,*int8 strtoul)" `700 
V L "su1" 5 122 "*int8" `704 
V L "su2" 5 122 "*int8" `705 
C L "strcmp" 5 19 2 "FUNCTION"
V L "s1" 5 134 "*int8" `707 
V L "s2" 5 134 "*int8" `708 
F G "strcmp" 5 135 "sint8(*int8 s1,*int8 s2,*int8 endptr,*int8 strtoul)" `706 
C L "strcoll" 5 19 2 "FUNCTION"
V L "s1" 5 144 "*int8" `710 
V L "s2" 5 144 "*int8" `711 
F G "strcoll" 5 145 "sint8(*int8 s1,*int8 s2)" `709 
C L "strncmp" 5 19 4 "FUNCTION"
V L "s1" 5 157 "*int8" `713 
V L "s2" 5 157 "*int8" `714 
V L "n" 5 157 "int16" `715 
F G "strncmp" 5 158 "sint8(*int8 s1,*int8 s2,int16 n)" `712 
C L "strxfrm" 5 19 3 "FUNCTION"
V L "s1" 5 169 "*int8" `717 
V L "s2" 5 169 "*int8" `718 
V L "n" 5 169 "int16" `719 
F G "strxfrm" 5 170 "int16(*int8 s1,*int8 s2,int16 n,*int8 rand)" `716 
V L "s" 5 171 "*int8" `720 
V L "n1" 5 172 "int8" `721 
C L "memchr" 5 19 3 "FUNCTION"
V L "s" 5 191 "*int8" `723 
V L "c" 5 191 "int8" `724 
V L "n" 5 191 "int16" `725 
F G "memchr" 5 192 "*int8(*int8 s,int8 c,int16 n)" `722 
V L "uc" 5 193 "int8" `726 
V L "su" 5 194 "*int8" `727 
C L "strchr" 5 19 2 "FUNCTION"
V L "s" 5 205 "*int8" `729 
V L "c" 5 205 "int8" `730 
F G "strchr" 5 206 "*int8(*int8 s,int8 c,*int8 rand)" `728 
C L "strcspn" 5 19 4 "FUNCTION"
V L "s1" 5 217 "*int8" `732 
V L "s2" 5 217 "*int8" `733 
F G "strcspn" 5 218 "int8(*int8 s1,*int8 s2)" `731 
V L "sc1" 5 219 "*int8" `734 
V L "sc2" 5 219 "*int8" `735 
C L "strpbrk" 5 19 4 "FUNCTION"
V L "s1" 5 232 "*int8" `737 
V L "s2" 5 232 "*int8" `738 
F G "strpbrk" 5 233 "*int8(*int8 s1,*int8 s2)" `736 
V L "sc1" 5 234 "*int8" `739 
V L "sc2" 5 234 "*int8" `740 
C L "strrchr" 5 19 2 "FUNCTION"
V L "s" 5 247 "*int8" `742 
V L "c" 5 247 "int8" `743 
F G "strrchr" 5 248 "*int8(*int8 s,int8 c)" `741 
V L "p" 5 249 "*int8" `744 
C L "strspn" 5 19 2 "FUNCTION"
V L "s1" 5 262 "*int8" `746 
V L "s2" 5 262 "*int8" `747 
F G "strspn" 5 263 "int8(*int8 s1,*int8 s2)" `745 
V L "sc1" 5 264 "*int8" `748 
V L "sc2" 5 264 "*int8" `749 
C L "strstr" 5 19 6 "FUNCTION"
V L "s1" 5 281 "*int8" `751 
V L "s2" 5 281 "*int8" `752 
F G "strstr" 5 282 "*int8(*int8 s1,*int8 s2)" `750 
V L "s" 5 283 "*int8" `753 
V L "t" 5 283 "*int8" `754 
C L "strtok" 5 19 13 "FUNCTION"
V L "s1" 5 320 "*int8" `756 
V L "s2" 5 320 "*int8" `757 
F G "strtok" 5 321 "*int8(*int8 s1,*int8 s2)" `755 
V L "beg" 5 322 "*int8" `758 
V L "end" 5 322 "*int8" `759 
V L "save" 5 323 "*int8" `760 
C L "strlen" 5 19 6 "FUNCTION"
V L "s" 5 369 "*int8" `762 
F G "strlen" 5 370 "int8(*int8 s)" `761 
V L "sc" 5 371 "*int8" `763 
C L "stricmp" 5 19 2 "FUNCTION"
V L "s1" 5 380 "*int8" `765 
V L "s2" 5 380 "*int8" `766 
F G "stricmp" 5 381 "sint8(*int8 s1,*int8 s2)" `764 
C L "strlwr" 5 19 3 "FUNCTION"
V L "s" 5 394 "*int8" `770 
F G "strlwr" 5 395 "*int8(*int8 s)" `769 
V L "p" 5 396 "*int8" `771 
C L "strupr" 5 19 3 "FUNCTION"
V L "s" 5 408 "*int8" `773 
F G "strupr" 5 409 "*int8(*int8 s)" `772 
V L "p" 5 410 "*int8" `774 
V L "numer" 3 274 "sint8" `675 
V L "denom" 3 274 "sint8" `777 
F G "div" 3 275 "div_t(sint8 numer,sint8 denom)" `674 
V L "val" 3 276 "div_t" `775 
V L "numer" 3 282 "sint16" `678 
V L "denom" 3 282 "sint16" `784 
F G "ldiv" 3 283 "ldiv_t(sint16 numer,sint16 denom)" `677 
V L "val" 3 284 "ldiv_t" `782 
V L "s" 3 361 "*int8" `790 
F G "atoe" 3 362 "float(*int8 s)" `667 
V L "pow10" 3 363 "float" `789 
V L "result" 3 364 "float" `790 
V L "sign" 3 365 "int8" `791 
V L "expsign" 3 366 "int8" `792 
V L "c" 3 367 "int8" `793 
V L "ptr" 3 368 "int8" `794 
V L "i" 3 369 "int8" `795 
V L "exp" 3 370 "float" `796 
V L "expcnt" 3 371 "int8" `797 
C L "atoe" 3 397 1 "FUNCTION"
V L "s" 3 429 "*int8" `810 
F G "atoi" 3 430 "sint8(*int8 s)" `646 
V L "result" 3 431 "sint8" `809 
V L "sign" 3 432 "int8" `810 
V L "base" 3 432 "int8" `811 
V L "index" 3 432 "int8" `812 
V L "c" 3 433 "int8" `813 
C L "atoi" 3 397 1 "FUNCTION"
C L "atoi" 3 397 1 "FUNCTION"
C L "atoi" 3 397 1 "FUNCTION"
C L "atoi" 3 397 1 "FUNCTION"
C L "atoi" 3 397 1 "FUNCTION"
C L "atoi" 3 397 1 "FUNCTION"
V L "s" 3 498 "*int8" `815 
F G "atol" 3 499 "sint16(*int8 s)" `654 
V L "result" 3 500 "sint16" `814 
V L "sign" 3 501 "int8" `815 
V L "base" 3 501 "int8" `816 
V L "index" 3 501 "int8" `817 
V L "c" 3 502 "int8" `818 
C L "atol" 3 397 1 "FUNCTION"
C L "atol" 3 397 1 "FUNCTION"
C L "atol" 3 397 1 "FUNCTION"
C L "atol" 3 397 1 "FUNCTION"
C L "mult_with10" 3 397 1 "FUNCTION"
V L "num" 3 565 "int32" `820 
F G "mult_with10" 3 566 "sint32(int32 num)" `819 
V L "s" 3 571 "*int8" `822 
F G "atoi32" 3 572 "sint32(*int8 s)" `648 
V L "result" 3 573 "sint32" `821 
V L "sign" 3 574 "int8" `822 
V L "base" 3 574 "int8" `823 
V L "index" 3 574 "int8" `824 
V L "c" 3 575 "int8" `825 
C L "atoi32" 3 397 1 "FUNCTION"
C L "atoi32" 3 397 1 "FUNCTION"
C L "atoi32" 3 397 1 "FUNCTION"
C L "atoi32" 3 397 1 "FUNCTION"
C L "atoi32" 3 397 1 "FUNCTION"
V L "num" 3 770 "sint32" `651 
V L "base" 3 770 "int8" `652 
V L "s" 3 770 "*int8" `829 
F G "itoa" 3 771 "*int8(sint32 num,int8 base,*int8 s)" `650 
V L "temp" 3 772 "int32" `826 
V L "i" 3 773 "int8" `827 
V L "sign" 3 773 "int8" `828 
V L "cnt" 3 773 "int8" `829 
V L "c" 3 774 "int8" `830 
C L "itoa" 3 397 1 "FUNCTION"
C L "itoa" 3 397 1 "FUNCTION"
C L "itoa" 3 397 1 "FUNCTION"
C L "itoa" 3 397 1 "FUNCTION"
C L "itoa" 3 397 1 "FUNCTION"
V L "s" 3 885 "*int8" `665 
V L "endptr" 3 885 "*int8" `839 
F G "strtof" 3 886 "float(*int8 s,*int8 endptr)" `664 
V L "pow10" 3 887 "float" `837 
V L "result" 3 888 "float" `838 
V L "skip" 3 889 "int1" `839 
V L "sign" 3 889 "int1" `840 
V L "point" 3 889 "int1" `841 
V L "c" 3 890 "int8" `842 
V L "ptr" 3 891 "int8" `843 
V L "s" 3 1103 "*int8" `661 
V L "endptr" 3 1103 "*int8" `662 
V L "base" 3 1103 "sint8" `848 
F G "strtoul" 3 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `660 
V L "sc" 3 1105 "*int8" `845 
V L "s1" 3 1105 "*int8" `846 
V L "sd" 3 1105 "*int8" `847 
V L "x" 3 1106 "int16" `848 
V L "sign" 3 1107 "int8" `849 
V L "digits" 3 1108 "int8[1]" `850 
C L "strtoul" 3 397 1 "FUNCTION"
C L "strtoul" 3 397 1 "FUNCTION"
C L "strtoul" 3 397 1 "FUNCTION"
V L "s" 3 1165 "*int8" `657 
V L "endptr" 3 1165 "*int8" `658 
V L "base" 3 1165 "sint8" `855 
F G "strtol" 3 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `656 
V L "sc" 3 1167 "*int8" `852 
V L "s1" 3 1167 "*int8" `853 
V L "sd" 3 1167 "*int8" `854 
V L "x" 3 1168 "sint16" `855 
V L "sign" 3 1169 "int8" `856 
V L "digits" 3 1170 "int8[1]" `857 
C L "strtol" 3 397 1 "FUNCTION"
C L "strtol" 3 397 1 "FUNCTION"
C L "strtol" 3 397 1 "FUNCTION"
V L "string" 3 1228 "*int8" `860 
F G "system" 3 1229 "sint8(*int8 string)" `672 
V L "s" 3 1233 "*int8" `860 
V L "n" 3 1233 "int16" `861 
F G "mblen" 3 1234 "int8(*int8 s,int16 n)" `859 
V L "pwc" 3 1238 "*int8" `863 
V L "s" 3 1238 "*int8" `864 
V L "n" 3 1238 "int16" `865 
F G "mbtowc" 3 1239 "int8(*int8 pwc,*int8 s,int16 n)" `862 
V L "s" 3 1244 "*int8" `867 
V L "wchar" 3 1244 "int8" `868 
F G "wctomb" 3 1245 "int8(*int8 s,int8 wchar)" `866 
V L "pwcs" 3 1250 "*int8" `870 
V L "s" 3 1250 "*int8" `871 
V L "n" 3 1250 "int16" `872 
F G "mbstowcs" 3 1251 "int16(*int8 pwcs,*int8 s,int16 n)" `869 
V L "s" 3 1256 "*int8" `874 
V L "pwcs" 3 1256 "*int8" `875 
V L "n" 3 1256 "int16" `876 
F G "wcstombs" 3 1257 "int16(*int8 s,*int8 pwcs,int16 n)" `873 
V G "_Randseed" 3 1266 "int32" `877 
F G "rand" 3 1269 "int16()" `669 
V L "seed" 3 1274 "int32" `882 
F G "srand" 3 1275 "void(int32 seed)" `670 
V L "p1" 3 1284 "*int8" `882 
V L "p2" 3 1284 "*int8" `883 
T G "*_Cmpfun" 3 1284 "sint8(*int8 p1,*int8 p2)" `881 
V L "qdata" 3 1291 "*int8" `886 
V L "qitems" 3 1291 "int8" `887 
V L "qsize" 3 1291 "int8" `888 
V L "cmp" 3 1291 "_Cmpfun" `889 
F G "qsort" 3 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `885 
V L "m" 3 1292 "int8" `890 
V L "j" 3 1292 "int8" `891 
V L "i" 3 1292 "int8" `892 
V L "l" 3 1292 "int8" `893 
V L "done" 3 1293 "int1" `894 
V L "t" 3 1294 "int8[16]" `895 
V L "key" 3 1319 "*int8" `898 
V L "base" 3 1319 "*int8" `899 
V L "num" 3 1319 "int16" `900 
V L "width" 3 1319 "int16" `901 
V L "cmp" 3 1319 "_Cmpfun" `902 
F G "bsearch" 3 1320 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `897 
V L "p" 3 1321 "*int8" `903 
V L "q" 3 1321 "*int8" `904 
V L "n" 3 1322 "int16" `905 
V L "pivot" 3 1323 "int16" `906 
V L "val" 3 1324 "sint8" `907 
C L "bsearch" 3 397 1 "FUNCTION"
V G "sayi" 0 12 "int8" `911 
V G "dizi" 0 13 "int8[7]" `912 
F G "MAIN" 0 18 "void()" `913 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
